import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Quiz = () => {
    // State management
    const [questions, setQuestions] = useState([]);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [selectedAnswers, setSelectedAnswers] = useState({});
    const [currentAnswer, setCurrentAnswer] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [quizStarted, setQuizStarted] = useState(false);
    const [, setQuizCompleted] = useState(false);
    const [score, setScore] = useState(0);
    const [showResults, setShowResults] = useState(false);
    const [timeLeft, setTimeLeft] = useState(60); // 60 seconds per question
    const [timerActive, setTimerActive] = useState(false);

    // Timer effect
    useEffect(() => {
        let interval = null;
        if (timerActive && timeLeft > 0) {
            interval = setInterval(() => {
                setTimeLeft(timeLeft => timeLeft - 1);
            }, 1000);
        } else if (timeLeft === 0) {
            // Auto-move to next question when time runs out
            handleNextQuestion();
        }
        return () => clearInterval(interval);
    }, [timerActive, timeLeft]);

    // Fetch quiz questions from API
    const fetchQuizQuestions = async () => {
        setIsLoading(true);
        try {
            const response = await axios.get('http://localhost:9090/study/quiz');
            // Assuming API returns array of questions generated by AI
            setQuestions(response.data.questions || [response.data]);
            setIsLoading(false);
        } catch (error) {
            console.error('Error fetching quiz questions:', error);
            setIsLoading(false);
            // Fallback demo questions if API fails
            setQuestions([
                {
                    id: 1,
                    question: "What does OOP stand for?",
                    options: [
                        "Object-Oriented Programming",
                        "Open Office Protocol",
                        "Optimal Operation Process",
                        "Online Output Platform"
                    ],
                    correctAnswer: 0
                },
                {
                    id: 2,
                    question: "Which of the following is a JavaScript framework?",
                    options: ["React", "HTML", "CSS", "MySQL"],
                    correctAnswer: 0
                },
                {
                    id: 3,
                    question: "What is the purpose of useState in React?",
                    options: [
                        "To manage component state",
                        "To handle HTTP requests",
                        "To style components",
                        "To create routes"
                    ],
                    correctAnswer: 0
                }
            ]);
        }
    };

    // Start quiz
    const startQuiz = () => {
        setQuizStarted(true);
        setQuizCompleted(false);
        setSelectedAnswers({});
        setCurrentAnswer(null);
        setCurrentQuestionIndex(0);
        setScore(0);
        setShowResults(false);
        setTimeLeft(60);
        setTimerActive(true);
        fetchQuizQuestions();
    };

    // Handle answer selection
    const handleAnswerSelect = (answerIndex) => {
        setCurrentAnswer(answerIndex);
    };

    // Handle next question
    const handleNextQuestion = () => {
        // Save current answer
        if (currentAnswer !== null) {
            setSelectedAnswers({
                ...selectedAnswers,
                [currentQuestionIndex]: currentAnswer
            });
        }

        // Move to next question or complete quiz
        if (currentQuestionIndex < questions.length - 1) {
            setCurrentQuestionIndex(currentQuestionIndex + 1);
            setCurrentAnswer(null);
            setTimeLeft(60); // Reset timer for next question
        } else {
            completeQuiz();
        }
    };

    // Calculate score and complete quiz
    const completeQuiz = () => {
        setTimerActive(false);

        // Include current answer if not saved yet
        const finalAnswers = currentAnswer !== null
            ? {...selectedAnswers, [currentQuestionIndex]: currentAnswer}
            : selectedAnswers;

        let correctAnswers = 0;
        questions.forEach((question, index) => {
            if (finalAnswers[index] === question.correctAnswer) {
                correctAnswers++;
            }
        });
        setScore(correctAnswers);
        setQuizCompleted(true);
        setShowResults(true);
    };

    // Reset quiz
    const resetQuiz = () => {
        setQuizStarted(false);
        setQuizCompleted(false);
        setQuestions([]);
        setSelectedAnswers({});
        setCurrentAnswer(null);
        setCurrentQuestionIndex(0);
        setScore(0);
        setShowResults(false);
        setTimeLeft(60);
        setTimerActive(false);
    };

    // Get score percentage
    const getScorePercentage = () => {
        return questions.length > 0 ? Math.round((score / questions.length) * 100) : 0;
    };

    // Get simple feedback message
    const getFeedbackMessage = () => {
        const percentage = getScorePercentage();
        if (percentage >= 90) return "Excellent work! 🎉";
        if (percentage >= 80) return "Great job! 👏";
        if (percentage >= 70) return "Good effort! 👍";
        if (percentage >= 60) return "Not bad, keep practicing! 📚";
        return "Keep studying! 💪";
    };

    // Format timer display
    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    // If quiz not started, show start screen
    if (!quizStarted) {
        return (
            <div className="m-8 p-8 bg-green-100 rounded-2xl shadow-xl">
                <div className="text-center">
                    <div className="mb-6">
                        <div
                            className="w-20 h-20 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center mx-auto mb-4">
                            <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                                      d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                            </svg>
                        </div>
                        <h2 className="text-3xl font-bold text-gray-800 mb-3">AI-Generated Quiz</h2>
                        <p className="text-gray-600 text-lg leading-relaxed">
                            Test your knowledge with our AI-powered quiz! Each question has a 1-minute timer, so think
                            fast and choose wisely.
                        </p>
                    </div>

                    <div className="bg-gray-50 rounded-xl p-6 mb-8">
                        <h3 className="text-lg font-semibold text-gray-800 mb-3">Quiz Rules:</h3>
                        <ul className="text-gray-600 space-y-2">
                            <li>• Multiple choice questions</li>
                            <li>• 1 minute per question</li>
                            <li>• Auto-advance when time runs out</li>
                            <li>• See results at the end</li>
                        </ul>
                    </div>

                    <button
                        onClick={startQuiz}
                        className="bg-gradient-to-r from-green-600 to-green-600 hover:from-green-700 hover:to-green-600 text-white font-bold py-4 px-8 rounded-xl transition duration-300 transform hover:scale-105 shadow-lg"
                    >
                        Start Quiz
                    </button>
                </div>
            </div>
        );
    }

    // Loading state
    if (isLoading) {
        return (
            <div className="max-w-2xl mx-auto p-8 bg-white rounded-2xl shadow-xl">
                <div className="text-center">
                    <div className="relative">
                        <div
                            className="animate-spin rounded-full h-16 w-16 border-4 border-gray-200 border-t-green-600 mx-auto mb-4"></div>
                        <div className="absolute inset-0 flex items-center justify-center">
                            <div className="w-8 h-8 bg-green-600 rounded-full animate-pulse"></div>
                        </div>
                    </div>
                    <p className="text-gray-600 text-lg">Generating AI quiz questions...</p>
                    <p className="text-gray-500 text-sm mt-2">This may take a few moments</p>
                </div>
            </div>
        );
    }

    // Show results screen
    if (showResults) {
        const percentage = getScorePercentage();
        return (
            <div className="max-w-2xl mx-auto p-8 bg-green-100 rounded-2xl shadow-xl">
                <div className="text-center">
                    <div className="mb-8">
                        <div
                            className="w-24 h-24 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6">
                            <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                                      d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <h2 className="text-3xl font-bold text-gray-800 mb-2">Quiz Complete!</h2>
                        <p className="text-gray-600">Here are your results:</p>
                    </div>

                    <div className="bg-gradient-to-r from-green-500 to-green-600 text-white rounded-2xl p-8 mb-8">
                        <div className="text-6xl font-bold mb-2">{percentage}%</div>
                        <div className="text-xl mb-3">{score} out of {questions.length} correct</div>
                        <div className="text-lg">{getFeedbackMessage()}</div>
                    </div>

                    <div className="flex gap-4 justify-center">
                        <button
                            onClick={startQuiz}
                            className="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-xl transition duration-300 transform hover:scale-105"
                        >
                            Take Another Quiz
                        </button>
                        <button
                            onClick={resetQuiz}
                            className="bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-xl transition duration-300"
                        >
                            Back to Home
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // Main quiz interface
    if (questions.length === 0) {
        return (
            <div className="max-w-2xl mx-auto p-8 bg-green-100 rounded-2xl shadow-xl">
                <div className="text-center">
                    <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                                  d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                    </div>
                    <p className="text-red-600 mb-6 text-lg">Failed to load quiz questions. Please try again.</p>
                    <button
                        onClick={resetQuiz}
                        className="bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-xl transition duration-300"
                    >
                        Back to Home
                    </button>
                </div>
            </div>
        );
    }

    const currentQuestion = questions[currentQuestionIndex];

    return (
        <div className="max-w-2xl mx-auto p-8 bg-white rounded-2xl shadow-xl">
            {/* Header with Progress and Timer */}
            <div className="flex justify-between items-center mb-8">
                <div className="text-gray-600">
                    <span className="text-sm">Question</span>
                    <div className="text-2xl font-bold text-gray-800">
                        {currentQuestionIndex + 1}/{questions.length}
                    </div>
                </div>

                <div className="text-center">
                    <div
                        className={`text-3xl font-bold ${timeLeft <= 10 ? 'text-red-600 animate-pulse' : 'text-green-600'}`}>
                        {formatTime(timeLeft)}
                    </div>
                    <div className="text-sm text-gray-500">Time remaining</div>
                </div>
            </div>

            {/* Progress Bar */}
            <div className="mb-8">
                <div className="w-full bg-gray-200 rounded-full h-3">
                    <div
                        className="bg-gradient-to-r from-green-600 to-green-400 h-3 rounded-full transition-all duration-500"
                        style={{width: `${((currentQuestionIndex + 1) / questions.length) * 100}%`}}
                    ></div>
                </div>
            </div>

            {/* Question */}
            <div className="mb-8">
                <h3 className="text-2xl font-bold text-gray-800 mb-8 leading-relaxed">
                    {currentQuestion.question}
                </h3>

                {/* Answer Options */}
                <div className="space-y-4">
                    {currentQuestion.options.map((option, index) => (
                        <button
                            key={index}
                            onClick={() => handleAnswerSelect(index)}
                            className={`w-full text-left p-5 rounded-xl border-2 transition-all duration-200 transform hover:scale-[1.02] ${
                                currentAnswer === index
                                    ? 'border-green-500 bg-green-50 text-green-800 shadow-lg'
                                    : 'border-gray-200 hover:border-gray-300 bg-gray-50 hover:bg-gray-100 hover:shadow-md'
                            }`}
                        >
                            <div className="flex items-center">
                <span className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold mr-4 ${
                    currentAnswer === index
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-300 text-gray-600'
                }`}>
                  {String.fromCharCode(65 + index)}
                </span>
                                <span className="text-lg">{option}</span>
                            </div>
                        </button>
                    ))}
                </div>
            </div>

            {/* Next Button */}
            <div className="flex justify-center">
                <button
                    onClick={handleNextQuestion}
                    disabled={currentAnswer === null}
                    className="bg-gradient-to-r from-green-600 to-green-400 hover:from-green-700 hover:to-green-500 disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed text-white font-bold py-4 px-8 rounded-xl transition-all duration-300 transform hover:scale-105 disabled:transform-none shadow-lg"
                >
                    {currentQuestionIndex === questions.length - 1 ? 'Complete Quiz' : 'Next Question'}
                </button>
            </div>
        </div>
    )
}
export default Quiz;
